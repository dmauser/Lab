# Variables
rg=vwan-migrate-lab
location=southcentralus
sharedkey=Msft123Msft123
mypip=$(curl ifconfig.io -s) # or replace with your home public ip, example mypip="1.1.1.1" (required for Cloud Shell deployments

##Azure Hub
hubname="Hub"
hubvnetcidr="10.10.0.0/24"
hubinternalcidr="10.10.0.0/25"
hubGatewaySubnet="10.10.0.128/27"

##Azure Spoke
spoke1name="Spoke"
spoke1cird="10.100.0.0/24"
spoke1vmsubnet="10.100.0.0/25"

##On-prem
onpremname=onprem
onpremvnetcird="192.168.0.0/23"
onpreminternalcidr="192.168.1.0/24"
onpremexternalcidr="192.168.0.0/29"
onpremasn="65001"
onprembgpaddr="169.254.21.1"

##vWAN
vhubname=scus-vhub
vwan=vwan
vwan_hub1_prefix=172.16.10.0/24

#Define username and password variables
read -p 'Username: ' username && read -sp 'Password: ' password #set variables for username and password over prompt. Use command 'echo $password' to ensure you type password correctly.


# Start: create RT

#Create VNETs and Subnets
#Build Networks Hub and Spoke Networks
# HUB VNET
az group create --name $rg --location $location --output none
az network vnet create --resource-group $rg --name $hubname-vnet --location $location --address-prefixes $hubvnetcidr --subnet-name internal --subnet-prefix $hubinternalcidr  --output none
az network vnet subnet create --address-prefix $hubGatewaySubnet --name GatewaySubnet --resource-group $rg --vnet-name $hubname-vnet --output none
#Spoke VNET
az network vnet create --resource-group $rg --name $spoke1name-vnet --location $location --address-prefixes $spoke1cird --subnet-name vmsubnet --subnet-prefix $spoke1vmsubnet --output none
#Simulated On-Prem
az network vnet create --resource-group $rg --name $onpremname-vnet --location $location --address-prefixes $onpremvnetcird --subnet-name external --subnet-prefix $onpremexternalcidr --output none
az network vnet subnet create --address-prefix $onpreminternalcidr --name internal --resource-group $rg --vnet-name $onpremname-vnet --output none

# vwan and hubs
az network vwan create -n $vwan -g $rg -l $location --branch-to-branch-traffic true --type Standard
az network vhub create -n $vhubname -g $rg --vwan $vwan -l $location --address-prefix $vwan_hub1_prefix --no-wait

#(Optional) UDR to restrict SSH access to Azure VMs from your Public IP only:
az network nsg create --resource-group $rg --name nsg-restrict-ssh --location $location
az network nsg rule create \
    --resource-group $rg \
    --nsg-name nsg-restrict-ssh \
    --name AllowSSHRule \
    --direction Inbound \
    --priority 100 \
    --source-address-prefixes $mypip/32 \
    --source-port-ranges '*' \
    --destination-address-prefixes '*' \
    --destination-port-ranges 22 \
    --access Allow \
    --protocol Tcp \
    --description "Allow inbound SSH"
az network vnet subnet update --name internal --resource-group $rg --vnet-name $hubname-vnet --network-security-group nsg-restrict-ssh
az network vnet subnet update --name vmsubnet --resource-group $rg --vnet-name $spoke1name-vnet --network-security-group nsg-restrict-ssh
az network vnet subnet update --name internal --resource-group $rg --vnet-name $onpremname-vnet --network-security-group nsg-restrict-ssh

#Create Active-Acive VPN Gateway
az deployment group create --name $hubname-vpngw --resource-group $rg \
--template-uri https://raw.githubusercontent.com/dmauser/Lab/master/VNG-APIPA/vng-apipa.json \
--parameters gatewayName=$hubname-vpngw gatewaySku=VpnGw1 vnetName=$hubname-vnet asn=65002 \
--no-wait

#Deploy OPNSense On-Premises
az vm image terms accept --urn thefreebsdfoundation:freebsd-13_1:13_1-release:13.1.0 -o none
az deployment group create --name $onpremname-nva --resource-group $rg \
--template-uri "https://raw.githubusercontent.com/dmauser/opnazure/master/ARM/main.json" \
--parameters scenarioOption=TwoNics virtualMachineName=$onpremname-nva virtualMachineSize=Standard_B2s existingvirtualNetwork=existing virtualNetworkName=$onpremname-vnet existingUntrustedSubnetName=external existingTrustedSubnetName=internal Location=$location \
--no-wait

#Create vWAN VPN gateway
az network vpn-gateway create -n $vhubname-vpn1 -g $rg -l $location --vhub $vhubname --asn 65515 --no-wait

#Deploy Azure VMs on Spoke VNETs and On-Premises

#1) Set username and password variables via prompt.
echo "Type username and password to be used when deploying VMS"
read -p 'Username: ' username && read -sp 'Password: ' password #set variables for username and password over prompt. Echo $password to ensure you type password correctly.

#2) Deploy VMs
#SpokeVM
az network public-ip create --name $spoke1name-vm-pip --resource-group $rg --location $location --allocation-method Dynamic
az network nic create --resource-group $rg -n $spoke1name-vm-nic --location $location --subnet vmsubnet --vnet-name $spoke1name-vnet --public-ip-address $spoke1name-vm-pip 
az vm create -n $spoke1name-vm -g $rg --image UbuntuLTS --size Standard_B1s --admin-username $username --admin-password $password --nics $spoke1name-vm-nic --location $location
#Add NGIX on Spoke VM
az vm extension set \
  --resource-group $rg \
  --vm-name $spoke1name-vm \
  --name customScript \
  --publisher Microsoft.Azure.Extensions \
  --protected-settings '{"commandToExecute": "apt-get -y update && apt-get -y install nginx && apt-get install inetutils-traceroute"}' \
  --no-wait

#On-premVM
az network public-ip create --name $onpremname-vm-pip --resource-group $rg --location $location --allocation-method Dynamic
az network nic create --resource-group $rg -n $onpremname-vm-nic --location $location --subnet internal --vnet-name $onpremname-vnet --public-ip-address $onpremname-vm-pip 
az vm create -n $onpremname-vm -g $rg --image UbuntuLTS --size Standard_B1s --admin-username $username --admin-password $password --nics $onpremname-vm-nic --no-wait --location $location

#UDR On-prem VM:
# Onprem-vm
az network route-table create --name rt-$onpremname --resource-group $rg --location $location
az network route-table route create --resource-group $rg --name default-to-nvalb --route-table-name rt-$onpremname \
--address-prefix 0.0.0.0/0 \
--next-hop-type VirtualAppliance \
--next-hop-ip-address $(az network nic show -g $rg --name $onpremname-nva-Trusted-NIC --query "ipConfigurations[].privateIpAddress" -o tsv)
az network route-table route create --resource-group $rg --name Exception --route-table-name rt-$onpremname \
--address-prefix $mypip/32 \
--next-hop-type Internet
az network vnet subnet update -n internal -g $rg --vnet-name $onpremname-vnet --route-table rt-$onpremname

#Create VNET Peerings between HUB and Spoke
# Hub to Spoke1 (UseRemoteGateways and Transit enabled)
az network vnet peering create -g $rg -n $hubname-to-$spoke1name --vnet-name $hubname-vnet --allow-vnet-access --allow-forwarded-traffic --allow-gateway-transit  --remote-vnet $(az network vnet show -g $rg -n $spoke1name-vnet --query id --out tsv) --output none
az network vnet peering create -g $rg -n $spoke1name-to-$hubname --vnet-name $spoke1name-vnet --allow-vnet-access --allow-forwarded-traffic --use-remote-gateways --remote-vnet $(az network vnet show -g $rg -n $hubname-vnet  --query id --out tsv) --output none

# Create Local Network Gateway with OnPrem info
az network local-gateway create --gateway-ip-address $(az network public-ip show --name $onpremname-nva-PublicIP --resource-group $rg -o tsv --query "ipAddress" -o tsv) \
--name lng-$onpremname \
--resource-group $rg \
--asn $onpremasn \
--bgp-peering-address $onprembgpaddr

# Create VPN Connection from Hub VPN Gateway to On-Prem NVA
az network vpn-connection create --name to-$onpremname \
--resource-group $rg \
--vnet-gateway1 $hubname-vpngw \
 -l $location \
--shared-key $sharedkey \
--local-gateway2 lng-$onpremname \
--enable-bgp

# Because APIPA making Azure-Gateway Responder only
az network vpn-connection update --name to-$onpremname \
    --resource-group $rg \
    --set connectionMode=ResponderOnly

# VWAN VPN Connection to On-Premises
onprep_nva_pip=$(az network public-ip show --name $onpremname-nva-PublicIP --resource-group $rg -o tsv --query "ipAddress" -o tsv)
az network vpn-site create -n $onpremname -g $rg -l $location --virtual-wan $vwan \
    --asn $onpremasn --bgp-peering-address $onprembgpaddr --ip-address $onprep_nva_pip \
    --device-vendor OPNsense --device-model BSD --link-speed 100
az network vpn-gateway connection create -n to-$onpremname --gateway-name $vhubname-vpn1 -g $rg --remote-vpn-site $onpremname \
    --enable-bgp true --protocol-type IKEv2 --shared-key "$sharedkey" --connection-bandwidth 100 

# Connfigure VNWA APIPA (manually on Portal need to get CLI/ARM script)
# vwan: scus-vhub: VPN (Site to site): View/Configure 
# VPN Gateway Instance 0
# Custom BGP IP Address: 169.254.21.6
# VPN Gateway Instance 0
# Custom BGP IP Address: 169.254.21.8

# Configure OPNSense
# System: Firmware: Plugins: os-frr
## Create Tunnel to Azure VPN Gateway (Single Tunnel).
# Get Azure VPN Gateway Public IPs:
az network public-ip show --name $hubname-vpngw-pip1 --resource-group $rg -o tsv --query "ipAddress" -o tsv
# Optional second tunnel
az network public-ip show --name $hubname-vpngw-pip2 --resource-group $rg -o tsv --query "ipAddress" -o tsv

# VPN: IPsec: Tunnel Settings
# Remote gateway 13.84.38.128
# My identifier: Ip Address: 20.88.198.77
az network public-ip show -g $rg -n Hub-vpngw-pip1 --query ipAddress -o tsv
# Pre-Shared Key: Msft123Msft123
# Encryption algorithm: AES:128
# Hash algorithm: SHA256
#  DH key group: 2
# Lifetime: 28800
# Install policy: Unchcked (very important)
# Add phase II entry
# Mode: Route-based
# Local Address: 169.254.21.1
# Remote Address: 169.254.21.4
# Encryption algorithms: AES checked
#                  Uncheck: Blowfish, 3DES, CAST128
# Hash algorithms: SHA256   
#  PFS key group: off    
#  Lifetime: 27000	                

## Create Tunnel to Virtual WAN
# Get Azure VPN Gateway Public IPs:
az network vpn-gateway show -n $vhubname-vpn1 -g $rg --query bgpSettings.bgpPeeringAddresses[0].tunnelIpAddresses[0] -o tsv
# Optional second tunnel
az network vpn-gateway show -n $vhubname-vpn1 -g $rg --query bgpSettings.bgpPeeringAddresses[1].tunnelIpAddresses[0] -o tsv

# VPN: IPsec: Tunnel Settings
# Remote gateway 52.249.58.13
# My identifier: Ip Address: 20.88.198.77
az network public-ip show --name $onpremname-nva-PublicIP --resource-group $rg -o tsv --query "ipAddress" -o tsv
# Pre-Shared Key: Msft123Msft123
# Encryption algorithm: AES:128
# Hash algorithm: SHA256
#  DH key group: 2
# Lifetime: 28800
# Install policy: Unchcked (very important)
# Add phase II entry
# Mode: Route-based
# Local Address: 169.254.21.1
# Remote Address: 169.254.21.6
# Encryption algorithms: AES checked
#                  Uncheck: Blowfish, 3DES, CAST128
# Hash algorithms: SHA256   
#  PFS key group: off    
#  Lifetime: 27000

# Enable IPSec and hit save

# Firewall Rules: IPSec
# Add +  Save + Apply Changes

# Routing: General: Enable Checked

# Routing: BGP: Genreral Enable Checked
# BGP AS Number: 65001
# Network: 192.168.1.0/24

# Routing: BGP: Neighbor: 
# Enable Checked
# Peer-IP: 169.254.21.2
# Remote AS: 65002

# Routing: BGP: Neighbor: 
# Enable Checked
# Peer-IP: 169.254.21.6
# Remote AS: 65515

# Access VMs using SSH:

# Validations

#IP info
az network nic show --resource-group $rg -n $spoke1name-vm-nic --query "ipConfigurations[].privateIpAddress" -o tsv
az network nic show-effective-route-table --resource-group $rg -n $spoke1name-vm-nic -o table

az network nic show --resource-group $rg -n $onpremname-vm-nic --query "ipConfigurations[].privateIpAddress" -o tsv
az network nic show-effective-route-table --resource-group $rg -n $onpremname-vm-nic -o table

#VMs Public IPs
echo Spoke-vm - $(az network public-ip show --name $spoke1name-vm-pip --resource-group $rg -o tsv --query "ipAddress" -o tsv) \
$onpremname-vm - $(az network public-ip show --name $onpremname-vm-pip --resource-group $rg -o tsv --query "ipAddress" -o tsv) \
$onpremname-nva - $(az network public-ip show --name $onpremname-NVA-PublicIP --resource-group $rg -o tsv --query "ipAddress" -o tsv)


#### MIGRATION ###

```bash
# Pre-Requisite
az extension add --name virtual-wan 
# or update
az extension update --name virtual-wan

# 1) Define Variables (Resource Groups, SpokeVNET, VWANHUB, VWAN VNET Connnection Name)
# SpokeVNET variables – replace below with your values.
spkrg=$rg
spkvnetname=$spoke1name-vnet #Spoke VNET Name
vnetid=$(az network vnet show -g $rg -n $spoke1name-vnet --query id --out tsv) #Spoke VNET ResourceID to be migrated to vWAN and used in step 3.
spkpeeringname=Spoke-to-Hub #Name of current peering using UseRemoteGateways=True that is connected to original HUB.
# vWAN HUB variables - replace below with your values.
vwanrg=$rg #vWAN Hub Resource Group Name
vhubname=$vhubname #vWAN Hub Name

# 2) Set UseRemoteGateways Gateways to false 
az network vnet peering update -g $spkrg -n $spkpeeringname --vnet-name $spkvnetname --set UseRemoteGateways=False

# 3) Configure VWAN HUB Virtual Network Connection.
#Note: For simplification of the process $spkvnetname is used as connection Name for vhub. If you need specify a new name just add a new variable for that.
az network vhub connection create -g $vwanrg -n $spkvnetname --vhub-name $vhubname --remote-vnet $vnetid

# <Migration completes here>

# Rolling back the original config (Remove vhub VNET Connection and re-enables original peering to UseRemoteGateways to true)
# ***NOTE***: Use only if previous steps did not work and you want to revert traffic back to original HUB.
az network vhub connection delete -g $vwanrg -n $spkvnetname --vhub-name $vhubname --yes
az network vnet peering update -g $spkrg -n $spkpeeringname --vnet-name $spkvnetname --set UseRemoteGateways=True

az network vnet peering show -g $spkrg -n $spkpeeringname --vnet-name $spkvnetname 

az network vhub connection show -g $vwanrg -n $spkvnetname --vhub-name $vhubname